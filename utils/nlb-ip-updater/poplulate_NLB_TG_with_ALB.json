{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Template of Register Application Load Balancer as IP target for Network Load Balancer",
	"Parameters": {
		"InternalALBDNSName": {
			"Type": "String",
			"Default": "",
			"Description": "Enter the DNS name of your internal Application Load Balancer name. e.g.application-load-balancer.elb.us-east-1.amazonaws.com"
		},
		"NLBTargetGroupARN": {
			"Type": "String",
			"Default": "",
			"Description": "Enter the target group ARN which you want the Application Load Balancer to be registered to"
		},
		"S3BucketName": {
			"Type": "String",
			"Default": "",
			"Description": "Enter the S3 Bucket name where Lambda zip file is stored"
		},
		"S3BucketKey": {
			"Type": "String",
			"Default": "utils/nlb-ip-updater/populate_NLB_TG_with_ALB.zip",
			"Description": "Enter the S3 Bucket key for the Lmbda zip file"
		},
		"ALBListenerPort": {
			"Type": "String",
			"Default": "",
			"Description": "Enter the traffic listener port of your internal Application Load Balancer"
		},
		"MAXDNSLookupPerInvocation": {
			"Type": "Number",
			"Default": 50,
			"Description": "Please specify the max DNS lookup this function can perform per invocation"
		},
		"InvocationBeforeDeregistration": {
			"Type": "Number",
			"Default": 3,
			"Description": "Please specify how many invocations are needed before a IP is deregistered"
		},
		"CWMetricFlagIPCount": {
			"Type": "String",
			"Default": "True",
			"AllowedValues": [
				"True",
				"False"
			],
			"Description": "Please specify if you want the Lambda function to create a CloudWatch metric to track IP count of your internal Application Load Balancer"
		},
    "SubnetA": {
			"Type": "String",
			"Description": "The subnet to invoke Lambda from. This subnet must be availability zone A"
		},
    "SubnetB": {
			"Type": "String",
			"Description": "The subnet to invoke Lambda from. This subnet must be availability zone B"
		},
    "SecurityGroupId": {
			"Type": "String",
			"Description": "Lambda security group"
		}
	},
	"Resources": {
		"ContentBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"PublicAccessBlockConfiguration": {
					"BlockPublicAcls": true,
					"BlockPublicPolicy": true,
					"IgnorePublicAcls": true,
					"RestrictPublicBuckets": true
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Ref": "AWS::StackName"
						}
					}
				]
			}
		},
		"LambdaFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"S3Bucket": {
						"Ref": "S3BucketName"
					},
					"S3Key": {
						"Ref": "S3BucketKey"
					}
				},
				"Description": "Register Application Load Balancer to Network Load Balancer",
				"Handler": "populate_NLB_TG_with_ALB.lambda_handler",
				"Timeout": 300,
        "VpcConfig": {
          "SubnetIds": [
            { "Ref": "SubnetA"},
            { "Ref": "SubnetB" }
          ],
          "SecurityGroupIds": [
            { "Ref": "SecurityGroupId"}
          ]
        },
				"Role": {
					"Fn::GetAtt": [
						"LambdaIAMRole",
						"Arn"
					]
				},
				"Runtime": "python3.8",
				"Environment": {
					"Variables": {
						"ALB_DNS_NAME": {
							"Ref": "InternalALBDNSName"
						},
						"NLB_TG_ARN": {
							"Ref": "NLBTargetGroupARN"
						},
						"S3_BUCKET": {
							"Ref": "ContentBucket"
						},
						"MAX_LOOKUP_PER_INVOCATION": {
							"Ref": "MAXDNSLookupPerInvocation"
						},
						"INVOCATIONS_BEFORE_DEREGISTRATION": {
							"Ref": "InvocationBeforeDeregistration"
						},
						"CW_METRIC_FLAG_IP_COUNT": {
							"Ref": "CWMetricFlagIPCount"
						},
						"ALB_LISTENER": {
							"Ref": "ALBListenerPort"
						}
					}
				}
			}
		},
		"ScheduledRule": {
			"Type": "AWS::Events::Rule",
			"Properties": {
				"Description": "ScheduledRule",
				"ScheduleExpression": "rate(1 minute)",
				"State": "ENABLED",
				"Targets": [
					{
						"Arn": {
							"Fn::GetAtt": [
								"LambdaFunction",
								"Arn"
							]
						},
						"Id": "TargetFunctionV1"
					}
				]
			},
			"DependsOn": [
				"LambdaFunction"
			]
		},
		"LambdaInvokePermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Fn::GetAtt": [
						"LambdaFunction",
						"Arn"
					]
				},
				"Principal": "events.amazonaws.com",
				"Action": "lambda:InvokeFunction",
				"SourceArn": {
					"Fn::GetAtt": [
						"ScheduledRule",
						"Arn"
					]
				}
			}
		},
		"LambdaIAMRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "lambda.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "Lambda-ALBasTarget",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "LambdaLogging",
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": [
										"arn:aws:logs:*:*:*"
									]
								},
								{
									"Sid": "S3",
									"Action": [
										"s3:Get*",
										"s3:PutObject",
										"s3:CreateBucket",
										"s3:ListBucket",
										"s3:ListAllMyBuckets"
									],
									"Effect": "Allow",
									"Resource": "*"
								},
								{
									"Action": "sts:AssumeRole",
									"Resource": "*",
									"Effect": "Allow"
								},
								{
									"Sid": "ELB",
									"Action": [
										"elasticloadbalancing:Describe*",
										"elasticloadbalancing:RegisterTargets",
										"elasticloadbalancing:DeregisterTargets",
                    "ec2:CreateNetworkInterface",
                    "ec2:AttachNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
									],
									"Effect": "Allow",
									"Resource": "*"
								},
								{
									"Sid": "CW",
									"Action": [
										"cloudwatch:putMetricData"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		}
	}
}